개요
지역 특성 일치 알고리즘 (Szeliski 4.1 장)을 작성하고 실제 장면의 여러 뷰를 일치 시키려고 시도합니다. 각 단계를 다루는 컴퓨터 시각 자료에는 수백 가지의 논문이 있습니다. 우리는 SIFT의 단순화 된 버전을 구현할 것이다. 그러나, 당신은 여분의 신용에 대한보다 정교한 알고리즘을 실험하는 것이 좋습니다!

작업 : 로컬 기능 일치의 세 가지 주요 단계를 구현합니다.

get_interest_points.m의 탐지. 해리스 코너 감지기 (Szeliski 4.1.1, 알고리즘 4.1)를 구현하십시오. Harris 코너 탐지기에 대한 스케일 불변성이나 키포인트 방향 추정에 대해 걱정할 필요가 없습니다.
get_descriptors.m의 설명. SIFT와 비슷한 로컬 기능 설명자를 구현하십시오 (Szeliski 4.1.2). 당신은 완전한 SIFT를 구현할 필요가 없습니다! 루 브릭을 만날 때까지 복잡성을 추가하십시오.
match_features.m에서 일치. 지역 특성을 일치시키는 "최근 접 거리 비율 테스트"방법을 구현하십시오 (특히 Szeliski 4.1.3, 특히 식 4.18).
잠재적으로 유용한 기능 : MATLAB 함수 : imfilter (), fspecial (), bwconncomp (), colfilt (), sort (), atan2 ().

금지 된 함수 : gradient (), imgradient (), imgradientxy (), corner (), extractFeatures (), detectSURFFeatures () 및 이와 유사한 pdist / 2 (), matchFeatures (), knnsearch ().


쓰기
프로세스 및 알고리즘을 설명하고, 결과를 보여주고, 추가 크레딧을 설명하고, 관련성이 있다고 생각되는 다른 정보를 알려주십시오. 우리는 LaTeX 템플릿을 제공합니다. PDF로 컴파일하여 코드와 함께 제출하십시오.

태스크:

구현 한 방법의 영향을 정량적으로 비교하십시오. 예를 들어, 정규화 된 패치 대신 SIFT와 유사한 설명자를 사용하면 성능이 70 % 좋은 일치에서 90 % 좋은 일치로 향상되었습니다. 추가 크레딧을 얻으려면 성능 향상을 포함하십시오.
노틀담, 마운트 러시 모어 및 감독 감독의 가우디 이미지 쌍에서 자신의 방법이 얼마나 잘 작동하는지 보여주십시오. eval.jpg는 시작 코드에서 생성 된 것으로 사용하십시오.
writeup / writeup.pdf를 제출하십시오.


표제
귀하의 구현이 Notre Dame 쌍에 대한 가장 확실한 100 건의 일치에 대해 80 %의 정확도에 도달하면 전체 코드 대금을 받게됩니다.

제한 시간 : 20 분이 귀하의 제한 시간이며, 그 후에 귀하는 구현을 위해 최대 40 개의 점수를 받게됩니다. 작성하기 전에 효율적인 코드를 작성해야합니다.

힌트 1 : '조정 가능한'(지향) 필터를 사용하여 설명자를 작성하십시오.
힌트 2 : 특성 설명자 일치에 대해 행렬 연산을 사용합니다.
Intel i7-4770K를 사용하여 PC에서 코드를 테스트합니다. 설치시 MATLAB R2017b 및 해당 이미지 처리 도구 상자, 컴퓨터 비전 도구 상자 및 통계 및 기계 학습 도구 상자가 있습니다.

+25 pts : get_interest_points.m의 Harris 코너 감지기 구현
+40 점 : get_descriptors.m에서 SIFT와 비슷한 로컬 기능 구현
+10 점 : match_features.m에서의 일치 구현
+20 점 : 서면 질문.
+05 pts : 작성.
+10 점 : 추가 크레딧 (최대 10 점).
-05 * n pts : 여기서 n은 지시 사항을 따르지 않은 횟수입니다.


추가 학점 (최대 10 점)
발각:

최대 5 점 : 여러 축척에서 키포인트를 감지하거나 축척 선택 방법을 사용하여 최상의 축척을 선택합니다.
최대 5 점 : 적응 형 비 - 최대 억제를 사용하십시오.
기술:

최대 5 점 : 기능 방향을 예측합니다.
최대 5 점 : 다중 축척 설명자. 여러 눈금에서 키포인트를 감지하는 경우 해당 눈금에 기능을 작성해야합니다.
어울리는:
기본 일치 알고리즘은 계산 비용이 많이 들며 코드에서 가장 느린 부분이 될 수 있습니다. 기능 일치를 대략적으로 또는 가속화하려고합니다.
최대 5 점 : Kd 트리와 같은 공간 분할 데이터 구조를 생성하여 가장 가까운 이웃을 추정하고 일치를 가속화합니다.


노트
projLF.m은 파일, 시각화 및 평가를 처리하고 구현할 세 가지 기능의 자리 표시자를 호출합니다. 시동 코드를 수정하지 않고 실행하면 노 틀 담 이미지에서 무작위로 매치 한 무작위 관심 지점을 시각화합니다. 서신은 show_correspondence.m으로 시각화됩니다.

Notre Dame, Mount Rushmore 및 감독 감독 Gaudi 이미지 쌍에는 '지상 진실'평가가 포함됩니다. evaluate_correspondence.m은 수작업으로 제공된 매치를 기반으로 각 매치를 옳거나 틀린 것으로 분류합니다 (자세한 내용은 show_ground_truth_corr.m 참조). 다른 이미지 쌍의 경우 collect_ground_truth_corr.m을 사용하여 추가적인 진실 성 일치를 만들 수 있습니다.

기능 일치 파이프 라인을 구현할 때 evaluate_correspondence.m을 사용하여 성능이 향상되는지 확인하십시오. 초기 노틀담 이미지 쌍에 대한 매개 변수를 특별히 조정하지 않도록주의하십시오. extra_data.zip (194 MB)에 추가 이미지 쌍을 제공합니다.이 이미지 쌍은 더 많은 시점, 크기 및 조명 변화를 나타냅니다. 디스플레이에 표시되는 이미지의 특성을 신중하게 고려하여 일치시킬 수는 있지만 더 어렵습니다.

구현 전략
1. get_interest_points () 대신 cheat_interest_points ()를 사용하십시오. 이 기능은 지상 진실 대응으로 3 개의 이미지 쌍에 대해서만 작동합니다. 이 기능은 최종 구현에서 사용할 수 없습니다. 테스트 케이스에 대해 100 - 150 개의 접지 진리를 직접로드합니다. 이 속임수를 사용하더라도 특성이 무작위이고 일치가 무작위이므로 처음에는 정확도가 0에 가까워집니다.
2. match_features ()를 구현하십시오. 기능이 무작위이기 때문에 정확도는 여전히 0에 가깝습니다.
3. get_descriptors ()를 변경하여 이미지 패치를 자릅니다. 너의 특징으로 16x16 (256 차원)의 명암 패치를 사용한다면, Notre Dame 쌍의 정확도는 ~ 40 %로 증가해야합니다. 다른 테스트 케이스의 정확도는 낮아질 것입니다 (Mount Rushmore 25 %, Episcopal Gaudi 7 %). 이미지 패치는 밝기 변경, 대비 변경 또는 작은 공간 이동에 영향을주지 않지만 기준선을 제공합니다.
4. SIFT와 유사한 기능을 구현하여 get_descriptors ()를 완료하십시오. 노틀담 쌍에서 ~ 50 %, 러시 모어 산에서 ~ 40 %, 주교 관구에서 ~ 10 %로 정확도가 증가해야합니다. 이러한 정확도는 인간이 선택한 대응이 로컬 기능 수준에서 매우 다르게 나타날 수 있기 때문에 여전히 크지 않습니다. 자신감이있는 성냥이 실제 성냥 일 확률이 높다는 것을 알아야합니다. 이는 비율 테스트를보다 쉽게 ??통과시킵니다.
5. 치팅을 중지하고 (!) get_interest_points ()를 구현하십시오. 해리스 코너는 지상 진실 포인트만큼 좋지 않으므로 정확성이 떨어질 수 있습니다. 반면에 수백 또는 수천 개의 관심 지점을 얻을 수 있으므로 자신감있는 일치를 찾을 수있는 기회가 더 많습니다. 노 틀 담 쌍에서 가장 확실한 100 개의 경기 만 평가하면 90 %의 정확도를 얻을 수 있어야합니다 (num_pts_to_evaluate 매개 변수 참조).

Mount Rushmore와 Episcopal Gaudi에서 높은 정확도를 얻으려면 추가 신용을해야 할 것입니다.